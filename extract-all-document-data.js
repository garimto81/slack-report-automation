#!/usr/bin/env node

/**
 * Íµ¨Í∏Ä Î¨∏ÏÑúÏùò Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
 */

const { google } = require('googleapis');
const fs = require('fs');

async function extractAllDocumentData() {
    console.log('üìÑ Íµ¨Í∏Ä Î¨∏ÏÑú Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú');
    console.log('=' .repeat(70));
    
    try {
        // 1. Ïù∏Ï¶ù ÏÑ§Ï†ï
        const auth = new google.auth.GoogleAuth({
            keyFile: 'service-account-key-fixed.json',
            scopes: [
                'https://www.googleapis.com/auth/documents',
                'https://www.googleapis.com/auth/drive'
            ]
        });
        
        const client = await auth.getClient();
        console.log('‚úÖ Ïù∏Ï¶ù ÏÑ±Í≥µ\n');
        
        // 2. Î¨∏ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
        const docs = google.docs({ version: 'v1', auth: client });
        const documentId = '1QvLn7yJJ1c3xtwF8bd4lK_k6FL4hmcT5TiGvoeGRPow';
        
        const document = await docs.documents.get({
            documentId: documentId
        });
        
        console.log('üìå Î¨∏ÏÑú Ï†ïÎ≥¥:');
        console.log(`Ï†úÎ™©: "${document.data.title}"`);
        console.log(`Î¨∏ÏÑú ID: ${documentId}`);
        console.log('');
        
        // 3. Î™®Îì† ÎÇ¥Ïö© Ï∂îÏ∂ú
        const content = document.data.body.content || [];
        console.log(`Ï¥ù ${content.length}Í∞ú ÏöîÏÜå\n`);
        console.log('=' .repeat(70));
        console.log('üìù Î¨∏ÏÑú Ï†ÑÏ≤¥ ÎÇ¥Ïö©:');
        console.log('=' .repeat(70));
        
        let elementNumber = 0;
        
        content.forEach((element, index) => {
            elementNumber++;
            
            // ÏÑπÏÖò Íµ¨Î∂Ñ
            if (element.sectionBreak) {
                console.log(`\n[ÏöîÏÜå ${elementNumber}] ‚îÅ‚îÅ‚îÅ ÏÑπÏÖò Íµ¨Î∂Ñ ‚îÅ‚îÅ‚îÅ`);
                const sectionType = element.sectionBreak.sectionStyle?.sectionType || 'CONTINUOUS';
                console.log(`ÏÑπÏÖò ÌÉÄÏûÖ: ${sectionType}`);
                console.log('');
            }
            
            // ÌéòÏù¥ÏßÄ Íµ¨Î∂Ñ
            else if (element.pageBreak) {
                console.log(`\n[ÏöîÏÜå ${elementNumber}] ‚îÅ‚îÅ‚îÅ ÌéòÏù¥ÏßÄ Íµ¨Î∂Ñ ‚îÅ‚îÅ‚îÅ\n`);
            }
            
            // Îã®ÎùΩ
            else if (element.paragraph) {
                const text = extractParagraphText(element.paragraph);
                const style = element.paragraph.paragraphStyle?.namedStyleType || 'NORMAL_TEXT';
                
                if (text) {
                    console.log(`\n[ÏöîÏÜå ${elementNumber}] ÌÖçÏä§Ìä∏ (${style}):`);
                    console.log(`"${text}"`);
                } else {
                    console.log(`\n[ÏöîÏÜå ${elementNumber}] (Îπà Îã®ÎùΩ)`);
                }
            }
            
            // ÌÖåÏù¥Î∏î
            else if (element.table) {
                const rows = element.table.tableRows || [];
                const cols = rows[0]?.tableCells?.length || 0;
                
                console.log(`\n[ÏöîÏÜå ${elementNumber}] ‚îÅ‚îÅ‚îÅ ÌÖåÏù¥Î∏î (${rows.length}Ìñâ √ó ${cols}Ïó¥) ‚îÅ‚îÅ‚îÅ`);
                console.log('');
                
                // Î™®Îì† Ìñâ Ï∂úÎ†•
                rows.forEach((row, rowIndex) => {
                    console.log(`‚îÄ‚îÄ‚îÄ‚îÄ Ìñâ ${rowIndex + 1} ‚îÄ‚îÄ‚îÄ‚îÄ`);
                    
                    const cells = row.tableCells || [];
                    cells.forEach((cell, cellIndex) => {
                        const cellText = extractCellText(cell);
                        
                        // Ìó§Îçî Ïù¥Î¶Ñ Í∞ÄÏ†∏Ïò§Í∏∞ (Ï≤´ Î≤àÏß∏ ÌñâÏù¥ Ìó§ÎçîÎùºÍ≥† Í∞ÄÏ†ï)
                        let columnName = `Ïó¥ ${cellIndex + 1}`;
                        if (rowIndex > 0 && rows[0] && rows[0].tableCells[cellIndex]) {
                            const headerText = extractCellText(rows[0].tableCells[cellIndex]);
                            if (headerText) {
                                columnName = headerText;
                            }
                        }
                        
                        if (cellText) {
                            // Ï≤´ Î≤àÏß∏ Ìñâ(Ìó§Îçî)Ïù∏ Í≤ΩÏö∞
                            if (rowIndex === 0) {
                                console.log(`  [${columnName}]: "${cellText}"`);
                            } else {
                                console.log(`  ${columnName}: "${cellText}"`);
                            }
                        }
                    });
                    console.log('');
                });
            }
            
            // Í∏∞ÌÉÄ ÏöîÏÜå
            else {
                console.log(`\n[ÏöîÏÜå ${elementNumber}] Í∏∞ÌÉÄ ÌÉÄÏûÖ: ${Object.keys(element).join(', ')}`);
            }
        });
        
        // 4. ÏöîÏïΩ ÌÜµÍ≥Ñ
        console.log('\n');
        console.log('=' .repeat(70));
        console.log('üìä Î¨∏ÏÑú ÌÜµÍ≥Ñ:');
        console.log('=' .repeat(70));
        
        let paragraphCount = 0;
        let tableCount = 0;
        let totalTextLength = 0;
        let totalTableRows = 0;
        
        content.forEach(element => {
            if (element.paragraph) {
                paragraphCount++;
                const text = extractParagraphText(element.paragraph);
                totalTextLength += text.length;
            }
            if (element.table) {
                tableCount++;
                totalTableRows += element.table.tableRows?.length || 0;
            }
        });
        
        console.log(`- Ï¥ù ÏöîÏÜå: ${content.length}Í∞ú`);
        console.log(`- Îã®ÎùΩ: ${paragraphCount}Í∞ú`);
        console.log(`- ÌÖåÏù¥Î∏î: ${tableCount}Í∞ú`);
        console.log(`- Ï¥ù ÌÖåÏù¥Î∏î Ìñâ: ${totalTableRows}Í∞ú`);
        console.log(`- Ï¥ù ÌÖçÏä§Ìä∏ Í∏∏Ïù¥: ${totalTextLength}Ïûê`);
        
        // 5. Îç∞Ïù¥ÌÑ∞Î•º ÌååÏùºÎ°ú Ï†ÄÏû•
        const outputData = {
            documentTitle: document.data.title,
            documentId: documentId,
            totalElements: content.length,
            extractedAt: new Date().toISOString(),
            content: []
        };
        
        content.forEach((element, index) => {
            if (element.paragraph) {
                outputData.content.push({
                    type: 'paragraph',
                    index: index + 1,
                    text: extractParagraphText(element.paragraph),
                    style: element.paragraph.paragraphStyle?.namedStyleType
                });
            } else if (element.table) {
                const tableData = {
                    type: 'table',
                    index: index + 1,
                    rows: []
                };
                
                element.table.tableRows?.forEach((row, rowIndex) => {
                    const rowData = [];
                    row.tableCells?.forEach(cell => {
                        rowData.push(extractCellText(cell));
                    });
                    tableData.rows.push(rowData);
                });
                
                outputData.content.push(tableData);
            } else if (element.sectionBreak) {
                outputData.content.push({
                    type: 'sectionBreak',
                    index: index + 1,
                    sectionType: element.sectionBreak.sectionStyle?.sectionType
                });
            }
        });
        
        // JSON ÌååÏùºÎ°ú Ï†ÄÏû•
        fs.writeFileSync('document-full-data.json', JSON.stringify(outputData, null, 2));
        console.log('\n‚úÖ Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Í∞Ä document-full-data.json ÌååÏùºÏóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.');
        
        console.log('\n‚úÖ Ï∂îÏ∂ú ÏôÑÎ£å!');
        
    } catch (error) {
        console.error('\n‚ùå Ï∂îÏ∂ú Ïã§Ìå®');
        console.error('Ïò§Î•ò:', error.message);
    }
}

/**
 * ÏÖÄÏóêÏÑú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
 */
function extractCellText(cell) {
    let text = '';
    const content = cell.content || [];
    
    content.forEach(paragraph => {
        if (paragraph.paragraph) {
            const elements = paragraph.paragraph.elements || [];
            elements.forEach(elem => {
                if (elem.textRun && elem.textRun.content) {
                    text += elem.textRun.content;
                }
            });
        }
    });
    
    return text.trim();
}

/**
 * Îã®ÎùΩÏóêÏÑú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
 */
function extractParagraphText(paragraph) {
    let text = '';
    const elements = paragraph.elements || [];
    
    elements.forEach(elem => {
        if (elem.textRun && elem.textRun.content) {
            text += elem.textRun.content;
        }
    });
    
    return text.trim();
}

// Î©îÏù∏ Ïã§Ìñâ
if (require.main === module) {
    extractAllDocumentData().catch(console.error);
}

module.exports = { extractAllDocumentData };