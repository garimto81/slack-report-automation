#!/usr/bin/env node

/**
 * Íµ¨Í∏Ä Î¨∏ÏÑú ÏûÖÎ†• Ïò§Î•ò ÏßÑÎã® ÎèÑÍµ¨
 */

require('dotenv').config();
const { google } = require('googleapis');

async function diagnoseInputError() {
    console.log('üîç Íµ¨Í∏Ä Î¨∏ÏÑú ÏûÖÎ†• Ïò§Î•ò ÏßÑÎã® ÏãúÏûë');
    console.log('=' .repeat(60));
    
    try {
        // Google Ïù∏Ï¶ù
        const auth = new google.auth.GoogleAuth({
            keyFile: 'service-account-key-fixed.json',
            scopes: [
                'https://www.googleapis.com/auth/documents',
                'https://www.googleapis.com/auth/drive'
            ]
        });
        
        const client = await auth.getClient();
        const docs = google.docs({ version: 'v1', auth: client });
        const drive = google.drive({ version: 'v3', auth: client });
        const documentId = process.env.GOOGLE_DOCS_ID;
        
        console.log(`üìã Î¨∏ÏÑú ID: ${documentId}`);
        console.log('‚úÖ Ïù∏Ï¶ù ÏÑ±Í≥µ\n');
        
        // 1. Í∏∞Î≥∏ Î¨∏ÏÑú Ï†ëÍ∑º ÌÖåÏä§Ìä∏
        console.log('üìÑ 1Îã®Í≥Ñ: Í∏∞Î≥∏ Î¨∏ÏÑú Ï†ëÍ∑º ÌÖåÏä§Ìä∏');
        console.log('‚îÄ'.repeat(40));
        
        const document = await docs.documents.get({ documentId });
        const revisionId = document.data.revisionId;
        
        console.log(`‚úÖ Î¨∏ÏÑú Ï†úÎ™©: "${document.data.title}"`);
        console.log(`‚úÖ ÌòÑÏû¨ Î¶¨ÎπÑÏ†Ñ ID: ${revisionId}`);
        console.log(`‚úÖ Î¨∏ÏÑú Í∏∏Ïù¥: ${document.data.body.content?.length || 0}Í∞ú ÏöîÏÜå\n`);
        
        // 2. Drive Í∂åÌïú ÌôïÏù∏
        console.log('üîê 2Îã®Í≥Ñ: Drive Í∂åÌïú ÌôïÏù∏');
        console.log('‚îÄ'.repeat(40));
        
        try {
            const fileInfo = await drive.files.get({
                fileId: documentId,
                fields: 'permissions,capabilities'
            });
            
            console.log('‚úÖ Drive API Ï†ëÍ∑º ÏÑ±Í≥µ');
            const capabilities = fileInfo.data.capabilities || {};
            console.log(`  Ìé∏Ïßë Í∞ÄÎä•: ${capabilities.canEdit ? '‚úÖ' : '‚ùå'}`);
            console.log(`  ÎåìÍ∏Ä Í∞ÄÎä•: ${capabilities.canComment ? '‚úÖ' : '‚ùå'}`);
            console.log(`  Í≥µÏú† Í∞ÄÎä•: ${capabilities.canShare ? '‚úÖ' : '‚ùå'}`);
            
        } catch (driveError) {
            console.log('‚ùå Drive API Ï†ëÍ∑º Ïã§Ìå®:', driveError.message);
            console.log('üí° Í∂åÌïú Î¨∏Ï†úÏùº Í∞ÄÎä•ÏÑ± ÎÜíÏùå');
        }
        
        console.log('');
        
        // 3. ÌÖåÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ (revision Ï∂îÏ†Å)
        console.log('üß™ 3Îã®Í≥Ñ: ÌÖåÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ (revision Ï∂îÏ†Å)');
        console.log('‚îÄ'.repeat(40));
        
        // Ïπ¥Î©îÎùº ÏÖÄ Ï∞æÍ∏∞
        const content = document.data.body.content || [];
        let tableElement = null;
        
        content.forEach((element) => {
            if (element.table && !tableElement) {
                tableElement = element;
            }
        });
        
        if (!tableElement) {
            console.log('‚ùå ÌÖåÏù¥Î∏îÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
        }
        
        const rows = tableElement.table.tableRows || [];
        const headers = rows[0].tableCells.map(cell => extractCellText(cell));
        const taskNameCol = headers.indexOf('ÏßÑÌñâ Ï§ëÏù∏ ÏóÖÎ¨¥ Î™ÖÏπ≠');
        
        console.log(`üìä ÌÖåÏù¥Î∏î: ${rows.length}Ìñâ √ó ${rows[0]?.tableCells?.length || 0}Ïó¥`);
        console.log(`üìã ÏóÖÎ¨¥Î™Ö Ïó¥ ÏúÑÏπò: ${taskNameCol + 1}Î≤àÏß∏\n`);
        
        if (taskNameCol === -1) {
            console.log('‚ùå ÏóÖÎ¨¥Î™Ö Ïó¥ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
        }
        
        // Ïπ¥Î©îÎùº Ìñâ 22 Ï∞æÍ∏∞
        const cameraRowIndex = 21; // 0-based
        const cameraRow = rows[cameraRowIndex];
        const taskCell = cameraRow.tableCells[taskNameCol];
        
        const currentText = extractCellText(taskCell);
        const elements = taskCell.content[0]?.paragraph?.elements || [];
        
        console.log(`üîç Ìñâ 22 ÌòÑÏû¨ ÏÉÅÌÉú:`);
        console.log(`  ÌòÑÏû¨ ÌÖçÏä§Ìä∏: "${currentText}"`);
        console.log(`  ÌÖçÏä§Ìä∏ Í∏∏Ïù¥: ${currentText.length}`);
        console.log(`  Elements Í∞úÏàò: ${elements.length}`);
        
        if (elements.length > 0) {
            console.log(`  Ï≤´ Î≤àÏß∏ element startIndex: ${elements[0].startIndex}`);
            console.log(`  Ï≤´ Î≤àÏß∏ element endIndex: ${elements[0].endIndex}`);
        }
        
        // ÌÖåÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏöîÏ≤≠ ÏÉùÏÑ±
        const testText = `ÌÖåÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ${new Date().getTime()}`;
        let testRequest;
        
        if (currentText.length === 0) {
            console.log('\nüîß Îπà ÏÖÄ ÌÖåÏä§Ìä∏: insertText ÏÇ¨Ïö©');
            if (elements.length > 0) {
                testRequest = {
                    insertText: {
                        location: { index: elements[0].startIndex },
                        text: testText
                    }
                };
            }
        } else {
            console.log('\nüîß Í∏∞Ï°¥ ÌÖçÏä§Ìä∏ ÌÖåÏä§Ìä∏: replaceAllText ÏÇ¨Ïö©');
            testRequest = {
                replaceAllText: {
                    containsText: { text: currentText, matchCase: false },
                    replaceText: testText
                }
            };
        }
        
        if (!testRequest) {
            console.log('‚ùå ÌÖåÏä§Ìä∏ ÏöîÏ≤≠ÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
            return;
        }
        
        // 4. Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Î∞è Ï∂îÏ†Å
        console.log('\nüöÄ 4Îã®Í≥Ñ: Ïã§Ï†ú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ Î∞è Ï∂îÏ†Å');
        console.log('‚îÄ'.repeat(40));
        
        console.log(`ÏóÖÎç∞Ïù¥Ìä∏ Ï†Ñ Î¶¨ÎπÑÏ†Ñ ID: ${revisionId}`);
        
        try {
            const updateResponse = await docs.documents.batchUpdate({
                documentId: documentId,
                requestBody: {
                    requests: [testRequest]
                }
            });
            
            console.log('‚úÖ batchUpdate Ìò∏Ï∂ú ÏÑ±Í≥µ');
            console.log(`  ÏùëÎãµ ÏÉÅÌÉú: ${updateResponse.status || 'OK'}`);
            console.log(`  Ï≤òÎ¶¨Îêú ÏöîÏ≤≠: ${updateResponse.data.replies?.length || 0}Í∞ú`);
            
            // ÏùëÎãµ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
            if (updateResponse.data.replies) {
                updateResponse.data.replies.forEach((reply, index) => {
                    console.log(`  ÏöîÏ≤≠ ${index + 1} ÏùëÎãµ:`, JSON.stringify(reply, null, 2));
                });
            }
            
        } catch (updateError) {
            console.log('‚ùå batchUpdate Ïã§Ìå®:', updateError.message);
            
            if (updateError.code === 400) {
                console.log('üí° 400 Ïò§Î•ò: API ÏöîÏ≤≠ ÌòïÏãù Î¨∏Ï†ú');
                console.log('   - Ïù∏Îç±Ïä§Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÍ±∞ÎÇò');
                console.log('   - ÌÖçÏä§Ìä∏ Î≤îÏúÑÍ∞Ä ÏûòÎ™ªÎêòÏóàÏùÑ Ïàò ÏûàÏùå');
            } else if (updateError.code === 403) {
                console.log('üí° 403 Ïò§Î•ò: Í∂åÌïú Î¨∏Ï†ú');
                console.log('   - Service AccountÏóê Ìé∏Ïßë Í∂åÌïúÏù¥ ÏóÜÏùå');
                console.log('   - Î¨∏ÏÑú Í≥µÏú† ÏÑ§Ï†ï ÌôïÏù∏ ÌïÑÏöî');
            }
            
            return;
        }
        
        // 5. Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏
        console.log('\nüìä 5Îã®Í≥Ñ: Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÌôïÏù∏');
        console.log('‚îÄ'.repeat(40));
        
        // Ïû†Ïãú ÎåÄÍ∏∞ (Google Docs ÎèôÍ∏∞Ìôî ÏãúÍ∞Ñ)
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const updatedDocument = await docs.documents.get({ documentId });
        const newRevisionId = updatedDocument.data.revisionId;
        
        console.log(`ÏóÖÎç∞Ïù¥Ìä∏ ÌõÑ Î¶¨ÎπÑÏ†Ñ ID: ${newRevisionId}`);
        console.log(`Î¶¨ÎπÑÏ†Ñ Î≥ÄÍ≤Ω Ïó¨Î∂Ä: ${revisionId !== newRevisionId ? '‚úÖ Î≥ÄÍ≤ΩÎê®' : '‚ùå Î≥ÄÍ≤Ω ÏóÜÏùå'}`);
        
        // ÏóÖÎç∞Ïù¥Ìä∏Îêú ÏÖÄ ÎÇ¥Ïö© ÌôïÏù∏
        const updatedContent = updatedDocument.data.body.content || [];
        let updatedTable = null;
        
        updatedContent.forEach((element) => {
            if (element.table && !updatedTable) {
                updatedTable = element;
            }
        });
        
        const updatedRows = updatedTable.table.tableRows || [];
        const updatedRow = updatedRows[cameraRowIndex];
        const updatedCell = updatedRow.tableCells[taskNameCol];
        const updatedText = extractCellText(updatedCell);
        
        console.log(`ÏóÖÎç∞Ïù¥Ìä∏Îêú ÌÖçÏä§Ìä∏: "${updatedText}"`);
        
        if (updatedText === testText) {
            console.log('‚úÖ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ! ÌÖçÏä§Ìä∏Í∞Ä Ï†ïÌôïÌûà Î≥ÄÍ≤ΩÎê®');
        } else if (updatedText === currentText) {
            console.log('‚ùå ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: ÌÖçÏä§Ìä∏Í∞Ä Î≥ÄÍ≤ΩÎêòÏßÄ ÏïäÏùå');
            console.log('üîß Í∞ÄÎä•Ìïú ÏõêÏù∏:');
            console.log('   1. Í∂åÌïú Î¨∏Ï†ú: ÏùΩÍ∏∞ Í∂åÌïúÎßå ÏûàÍ≥† Ïì∞Í∏∞ Í∂åÌïú ÏóÜÏùå');
            console.log('   2. Ïù∏Îç±Ïä§ Î¨∏Ï†ú: ÏûòÎ™ªÎêú ÏúÑÏπòÏóê ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ');
            console.log('   3. Î¨∏ÏÑú Ïû†Í∏à: Îã§Î•∏ ÏÇ¨Ïö©ÏûêÍ∞Ä Ìé∏Ïßë Ï§ë');
            console.log('   4. API Ï†úÌïú: ÏùºÏãúÏ†ÅÏù∏ Ï†úÌïú ÏÉÅÌÉú');
        } else {
            console.log('‚ö†Ô∏è ÏòàÏÉÅÏπò Î™ªÌïú Í≤∞Í≥º: Îã§Î•∏ ÌÖçÏä§Ìä∏Î°ú Î≥ÄÍ≤ΩÎê®');
        }
        
        // 6. ÏõêÏÉÅÎ≥µÍµ¨ (ÌÖåÏä§Ìä∏Ïù¥ÎØÄÎ°ú)
        console.log('\nüîÑ 6Îã®Í≥Ñ: ÌÖåÏä§Ìä∏ ÏõêÏÉÅÎ≥µÍµ¨');
        console.log('‚îÄ'.repeat(40));
        
        if (updatedText === testText && currentText.length > 0) {
            try {
                await docs.documents.batchUpdate({
                    documentId: documentId,
                    requestBody: {
                        requests: [{
                            replaceAllText: {
                                containsText: { text: testText, matchCase: false },
                                replaceText: currentText
                            }
                        }]
                    }
                });
                console.log('‚úÖ ÏõêÏÉÅÎ≥µÍµ¨ ÏôÑÎ£å');
            } catch (restoreError) {
                console.log('‚ö†Ô∏è ÏõêÏÉÅÎ≥µÍµ¨ Ïã§Ìå®:', restoreError.message);
            }
        }
        
        console.log('\nüéØ ÏßÑÎã® ÏôÑÎ£å!');
        
    } catch (error) {
        console.error('‚ùå ÏßÑÎã® ÎèÑÍµ¨ Ïò§Î•ò:', error.message);
        if (error.response && error.response.data) {
            console.error('ÏÉÅÏÑ∏:', JSON.stringify(error.response.data, null, 2));
        }
    }
}

// ÏÖÄÏóêÏÑú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
function extractCellText(cell) {
    let text = '';
    const content = cell.content || [];
    
    content.forEach(paragraph => {
        if (paragraph.paragraph) {
            const elements = paragraph.paragraph.elements || [];
            elements.forEach(elem => {
                if (elem.textRun && elem.textRun.content) {
                    text += elem.textRun.content;
                }
            });
        }
    });
    
    return text.trim();
}

// Ïã§Ìñâ
if (require.main === module) {
    diagnoseInputError().catch(console.error);
}

module.exports = { diagnoseInputError };