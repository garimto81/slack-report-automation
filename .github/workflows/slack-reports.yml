# .github/workflows/automated-reports.yml

name: Automated Slack Reports

on:
  # 1. 스케줄 실행: 월요일-금요일 오전 9시 (KST)에 워크플로우를 트리거합니다.
  schedule:
    - cron: '0 0 * * 1-5'  # UTC 0시 = KST 오전 9시 (평일)

  # 2. 수동 실행: 필요시 'auto', 'daily', 'weekly', 'monthly' 리포트를 선택하여 직접 실행합니다.
  workflow_dispatch:
    inputs:
      report_type:
        description: '실행할 리포트 종류 선택'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - daily
          - weekly
          - monthly

  # 3. 코드 변경 시 테스트: main 브랜치에 push 또는 pull request가 발생했을 때 테스트 작업을 실행합니다.
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# 모든 작업에 공통으로 적용될 환경 변수
env:
  TZ: Asia/Seoul

jobs:
  # ===============================================
  # ==      리포트 생성 작업 (스케줄/수동 실행)      ==
  # ===============================================
  generate-report:
    name: Generate Report
    runs-on: ubuntu-latest
    # 스케줄 또는 수동 실행일 때만 이 작업을 실행합니다.
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm' # npm 캐싱 활성화

      # 3. NPM 의존성 설치 (npm ci 사용을 권장)
      - name: Install dependencies
        run: npm ci # package-lock.json을 기반으로 더 빠르고 안정적으로 설치

      # 4. 실행할 리포트 종류 결정
      - name: Determine report type
        id: report
        run: |
          REPORT_TYPE=""
          # 수동 실행의 경우, 입력받은 값을 그대로 사용
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            REPORT_TYPE="${{ github.event.inputs.report_type }}"
          fi
          
          # 스케줄 실행 또는 수동 실행에서 'auto'를 선택한 경우, 날짜에 따라 자동 결정
          # 우선순위: 월간 > 주간 > 일간
          if [ -z "$REPORT_TYPE" ] || [ "$REPORT_TYPE" = "auto" ]; then
            DAY_OF_WEEK=$(date +%u)
            DAY_OF_MONTH=$(date +%d)
            
            # 매월 첫째 주 월요일이면 월간 리포트
            if [ "$DAY_OF_WEEK" = "1" ] && [ "$DAY_OF_MONTH" -le 7 ]; then
              REPORT_TYPE="monthly"
            # 월요일이면 주간 리포트
            elif [ "$DAY_OF_WEEK" = "1" ]; then
              REPORT_TYPE="weekly"
            # 그 외 평일은 일간 리포트
            else
              REPORT_TYPE="daily"
            fi
          fi
          
          echo "report_type=${REPORT_TYPE}" >> "$GITHUB_OUTPUT"
          echo "✅ Report type determined: ${REPORT_TYPE}"

      # 5. 리포트 생성 스크립트 실행
      - name: Generate Report
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          REPORT_TYPE="${{ steps.report.outputs.report_type }}"
          echo "📊 Generating ${REPORT_TYPE} report..."
          node generate-full-report.js $REPORT_TYPE
          echo "✅ Report sent successfully"

  # ===============================================
  # ==          로직 테스트 작업 (Push/PR)          ==
  # ===============================================
  test-logic:
    name: Test Logic
    runs-on: ubuntu-latest
    # Push 또는 Pull Request일 때만 이 작업을 실행합니다.
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Test Script
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🧪 Testing logic..."
          node test-grouping-logic.js
          echo "✅ Logic test completed"
