name: Automated Slack Reports

on:
  schedule:
    # 평일 오전 9시만 실행 (월-금, 한국 시간)
    # UTC 0:00 = KST 9:00
    - cron: '0 0 * * 1-5'  # 월요일(1) ~ 금요일(5)
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Report type to generate'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto      # 자동 판단
          - daily     # 일간 보고서
          - weekly    # 주간 보고서
          - monthly   # 월간 보고서
  push:
    branches:
      - main
      - clean-deployment-branch

env:
  TZ: Asia/Seoul

jobs:
  generate-report:
    name: Generate Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Show environment
        run: |
          echo "📁 Current directory: $(pwd)"
          echo "📋 Files:"
          ls -la
          echo ""
          echo "🔧 Node version: $(node --version)"
          echo "📦 NPM version: $(npm --version)"

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          echo "📁 Current working directory: $(pwd)"
          echo "📋 Contents:"
          ls -la
          echo ""
          
          if [ -f "package.json" ]; then
            echo "✅ package.json found"
            echo "📦 Running npm install..."
            npm install --no-fund --no-audit
            echo "✅ Dependencies installed successfully"
            echo ""
            echo "📋 node_modules created:"
            [ -d "node_modules" ] && echo "✅ node_modules exists" || echo "❌ node_modules not found"
          else
            echo "❌ package.json not found!"
            echo "📁 Files in current directory:"
            ls -la
            exit 1
          fi

      - name: Determine report type
        id: report
        run: |
          echo "🔍 Determining report type..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📅 Date: $(TZ=Asia/Seoul date '+%Y-%m-%d %A')"
          echo "🕐 Time: $(TZ=Asia/Seoul date '+%H:%M:%S KST')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          REPORT_TYPE=""
          DAY_OF_WEEK=$(date +%u)
          DAY_OF_MONTH=$(date +%d)
          
          # 주말 체크
          if [ $DAY_OF_WEEK -ge 6 ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "🚫 Weekend detected - skipping automatic report"
            REPORT_TYPE="skip"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 수동 실행
            if [ "${{ github.event.inputs.report_type }}" = "auto" ]; then
              echo "🤖 Auto mode selected - applying priority rules"
            else
              REPORT_TYPE="${{ github.event.inputs.report_type }}"
              echo "👤 Manual override: $REPORT_TYPE"
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            # Push 이벤트는 테스트 모드
            REPORT_TYPE="test"
            echo "🧪 Test mode for push event"
          fi
          
          # 자동 우선순위 판단 (월간 > 주간 > 일간)
          if [ -z "$REPORT_TYPE" ] || [ "$REPORT_TYPE" = "auto" ]; then
            # 첫째주 월요일 체크 (1-7일 사이의 월요일)
            if [ "$DAY_OF_WEEK" = "1" ] && [ "$DAY_OF_MONTH" -ge 1 ] && [ "$DAY_OF_MONTH" -le 7 ]; then
              REPORT_TYPE="monthly"
              echo "📊 Priority 1: MONTHLY (First Monday of month)"
              echo "💡 This replaces weekly and daily reports"
            elif [ "$DAY_OF_WEEK" = "1" ]; then
              REPORT_TYPE="weekly"
              echo "📊 Priority 2: WEEKLY (Monday)"
              echo "💡 This replaces daily report"
            else
              REPORT_TYPE="daily"
              echo "📊 Priority 3: DAILY (regular weekday)"
            fi
          fi
          
          echo "report_type=${REPORT_TYPE}" >> $GITHUB_OUTPUT
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Decision: ${REPORT_TYPE}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Skip weekend
        if: steps.report.outputs.report_type == 'skip'
        run: |
          echo "⏭️ Skipping weekend execution"
          exit 0

      - name: Test mode
        if: steps.report.outputs.report_type == 'test'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🧪 Running test mode..."
          if [ -f "test-grouping-logic.js" ]; then
            node test-grouping-logic.js daily || true
          fi
          echo "✅ Test completed"

      - name: Generate Report
        if: steps.report.outputs.report_type != 'skip' && steps.report.outputs.report_type != 'test'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          REPORT_TYPE="${{ steps.report.outputs.report_type }}"
          
          echo "╔═══════════════════════════════════╗"
          echo "║   Generating ${REPORT_TYPE^^} Report    ║"
          echo "╚═══════════════════════════════════╝"
          
          node generate-full-report.js $REPORT_TYPE
          
          echo "✅ ${REPORT_TYPE} report sent successfully"

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "📊 Execution Summary"
          echo "━━━━━━━━━━━━━━━━━━"
          echo "Report: ${{ steps.report.outputs.report_type }}"
          echo "Time: $(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')"
          echo "Status: ${{ job.status }}"