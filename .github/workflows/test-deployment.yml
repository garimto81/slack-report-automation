name: Test GitHub Actions Environment

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'setup'
        type: choice
        options:
          - setup          # 기본 체크아웃 및 Node.js 설정 테스트
          - dependencies   # 의존성 설치 테스트  
          - full          # 전체 워크플로우 테스트

env:
  TZ: Asia/Seoul

jobs:
  test-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Show environment info
        run: |
          echo "🌍 Environment Information"
          echo "=========================="
          echo "🗂️  Repository: ${{ github.repository }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "📁 Working directory: $(pwd)"
          echo "🕐 Current time: $(date)"
          echo ""
          
      - name: List repository contents
        run: |
          echo "📋 Repository Contents"
          echo "====================="
          ls -la
          echo ""
          echo "📁 .github directory:"
          ls -la .github/workflows/ || echo "No workflows directory"
          
      - name: Setup Node.js
        if: inputs.test_type != 'setup-only'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Verify package files
        if: inputs.test_type != 'setup-only'
        run: |
          echo "📦 Package Files Check"
          echo "====================="
          if [ -f "package.json" ]; then
            echo "✅ package.json found"
            echo "📄 package.json size: $(wc -c < package.json) bytes"
          else
            echo "❌ package.json NOT found!"
            exit 1
          fi
          
          if [ -f "package-lock.json" ]; then
            echo "✅ package-lock.json found"
            echo "📄 package-lock.json size: $(wc -c < package-lock.json) bytes"
          else
            echo "❌ package-lock.json NOT found!"
            exit 1
          fi
          
      - name: Test npm ci installation
        if: inputs.test_type == 'dependencies' || inputs.test_type == 'full'
        run: |
          echo "📦 Testing npm ci installation"
          echo "=============================="
          npm ci
          echo ""
          echo "✅ npm ci completed successfully"
          echo "📁 node_modules created:"
          ls -la node_modules/ | head -10
          echo "..."
          echo "📊 Total packages: $(ls node_modules/ | wc -l)"
          
      - name: Verify dependencies
        if: inputs.test_type == 'dependencies' || inputs.test_type == 'full'
        run: |
          echo "🔍 Dependency Verification"
          echo "=========================="
          echo "📦 Checking required packages:"
          
          # Check main dependencies
          if [ -d "node_modules/@slack/web-api" ]; then
            echo "✅ @slack/web-api installed"
          else
            echo "❌ @slack/web-api missing!"
            exit 1
          fi
          
          if [ -d "node_modules/@google/generative-ai" ]; then
            echo "✅ @google/generative-ai installed"
          else
            echo "❌ @google/generative-ai missing!"
            exit 1
          fi
          
      - name: Test script syntax
        if: inputs.test_type == 'full'
        run: |
          echo "🧪 Script Syntax Test"
          echo "===================="
          
          # Test main script syntax without executing
          if [ -f "generate-full-report.js" ]; then
            echo "🔍 Checking generate-full-report.js syntax:"
            node -c generate-full-report.js
            echo "✅ Syntax check passed"
          else
            echo "❌ generate-full-report.js not found!"
            exit 1
          fi
          
          # Test other JS files
          for jsfile in *.js; do
            if [ -f "$jsfile" ] && [ "$jsfile" != "generate-full-report.js" ]; then
              echo "🔍 Checking $jsfile syntax:"
              node -c "$jsfile" && echo "✅ $jsfile syntax OK" || echo "❌ $jsfile syntax error"
            fi
          done
          
      - name: Test Summary
        if: always()
        run: |
          echo ""
          echo "🎯 Test Summary"
          echo "==============="
          echo "Test type: ${{ inputs.test_type }}"
          echo "Status: ${{ job.status }}"
          echo "Time: $(date)"
          echo ""
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 All tests passed! GitHub Actions environment is ready."
          else
            echo "❌ Some tests failed. Check the logs above for details."
          fi