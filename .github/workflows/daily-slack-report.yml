name: Daily Slack Report

on:
  schedule:
    # 평일 오전 9시 실행 (월-금, 한국 시간)
    # UTC 0:00 = KST 9:00
    - cron: '0 0 * * 1-5'  # 월요일(1) ~ 금요일(5)만 실행
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Report type to generate'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto      # 자동 판단 (우선순위 기반)
          - daily     # 강제 일간
          - weekly    # 강제 주간
          - monthly   # 강제 월간
  push:
    branches:
      - main
      - clean-deployment-branch

env:
  TZ: Asia/Seoul
  NODE_VERSION: '18'

jobs:
  generate-report:
    name: Generate Weekday Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm install
          echo "✅ Dependencies installed successfully"

      - name: Check if today is weekday
        id: weekday
        run: |
          DAY_OF_WEEK=$(date +%u)
          echo "📅 Today is $(date +%A) (Day $DAY_OF_WEEK)"
          
          if [ $DAY_OF_WEEK -ge 1 ] && [ $DAY_OF_WEEK -le 5 ]; then
            echo "is_weekday=true" >> $GITHUB_OUTPUT
            echo "✅ Today is a weekday - proceeding with report"
          else
            echo "is_weekday=false" >> $GITHUB_OUTPUT
            echo "🚫 Today is weekend - skipping report"
          fi

      - name: Determine report type (Priority based)
        id: report
        if: steps.weekday.outputs.is_weekday == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          echo "🔍 Determining report type with priority..."
          echo "📊 Priority: Monthly > Weekly > Daily"
          
          REPORT_TYPE=""
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.report_type }}" = "auto" ]; then
              # 자동 판단 모드
              echo "🤖 Auto mode - checking priorities..."
            else
              # 수동 선택 모드
              REPORT_TYPE="${{ github.event.inputs.report_type }}"
              echo "👤 Manual mode - selected: $REPORT_TYPE"
            fi
          fi
          
          # 자동 판단 로직 (우선순위: 월간 > 주간 > 일간)
          if [ -z "$REPORT_TYPE" ] || [ "$REPORT_TYPE" = "auto" ]; then
            DAY_OF_MONTH=$(date +%d)
            DAY_OF_WEEK=$(date +%u)
            
            echo "📅 Current date info:"
            echo "   - Date: $(date '+%Y-%m-%d')"
            echo "   - Day of month: $DAY_OF_MONTH"
            echo "   - Day of week: $DAY_OF_WEEK ($(date +%A))"
            
            # 우선순위 1: 월간 보고서 (매월 1일)
            if [ "$DAY_OF_MONTH" = "01" ]; then
              REPORT_TYPE="monthly"
              echo "📊 Monthly report day detected (1st of month)"
            # 우선순위 2: 주간 보고서 (매주 월요일, 1일이 아닌 경우)
            elif [ "$DAY_OF_WEEK" = "1" ]; then
              REPORT_TYPE="weekly"
              echo "📊 Weekly report day detected (Monday)"
            # 우선순위 3: 일간 보고서 (그 외 평일)
            else
              REPORT_TYPE="daily"
              echo "📊 Daily report day (regular weekday)"
            fi
          fi
          
          # Push 이벤트는 테스트 모드
          if [ "${{ github.event_name }}" = "push" ]; then
            REPORT_TYPE="test"
            echo "🧪 Push event detected - running in test mode"
          fi
          
          echo "report_type=${REPORT_TYPE}" >> $GITHUB_OUTPUT
          echo "✅ Final decision: ${REPORT_TYPE} report"
          
          # 보고서 타입별 설명
          case $REPORT_TYPE in
            monthly)
              echo "📋 Will generate MONTHLY report (covers last 30 days)"
              echo "   Includes all weekly and daily activities"
              ;;
            weekly)
              echo "📋 Will generate WEEKLY report (covers last 7 days)"
              echo "   Includes all daily activities for the week"
              ;;
            daily)
              echo "📋 Will generate DAILY report (covers last 24 hours)"
              ;;
            test)
              echo "📋 Will run TEST mode (no actual reports sent)"
              ;;
          esac

      - name: Skip weekend execution
        if: steps.weekday.outputs.is_weekday == 'false' && github.event_name != 'workflow_dispatch'
        run: |
          echo "⏭️ Skipping weekend execution"
          echo "📅 Reports are only generated on weekdays (Monday-Friday)"
          echo "💡 Use manual workflow dispatch to generate reports on weekends"
          exit 0

      - name: Test mode - Verify scripts
        if: steps.report.outputs.report_type == 'test'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🧪 Running in test mode..."
          
          # 파일 존재 확인
          echo "Checking required files..."
          [ -f "generate-full-report.js" ] && echo "✅ generate-full-report.js exists" || echo "❌ generate-full-report.js not found"
          [ -f "test-grouping-logic.js" ] && echo "✅ test-grouping-logic.js exists" || echo "❌ test-grouping-logic.js not found"
          
          # 그룹화 로직 테스트만 실행 (실제 메시지 전송 없음)
          if [ -f "test-grouping-logic.js" ]; then
            echo "Running grouping logic test..."
            node test-grouping-logic.js daily || echo "Test completed with status $?"
          fi
          
          echo "✅ Test mode completed"

      - name: Generate Daily Report
        if: steps.report.outputs.report_type == 'daily'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📅 DAILY REPORT GENERATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🕐 Time: $(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')"
          echo "📊 Coverage: Last 24 hours"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          node generate-full-report.js daily
          
          echo "✅ Daily report sent successfully"

      - name: Generate Weekly Report
        if: steps.report.outputs.report_type == 'weekly'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📅 WEEKLY REPORT GENERATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🕐 Time: $(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')"
          echo "📊 Coverage: Last 7 days"
          echo "💡 Note: Replaces daily report for today"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          node generate-full-report.js weekly
          
          echo "✅ Weekly report sent successfully"

      - name: Generate Monthly Report
        if: steps.report.outputs.report_type == 'monthly'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📅 MONTHLY REPORT GENERATION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🕐 Time: $(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')"
          echo "📊 Coverage: Last 30 days"
          echo "💡 Note: Replaces weekly and daily reports for today"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          node generate-full-report.js monthly
          
          echo "✅ Monthly report sent successfully"

      - name: Summary
        if: always()
        run: |
          echo ""
          echo "╔════════════════════════════════════╗"
          echo "║      WORKFLOW EXECUTION SUMMARY     ║"
          echo "╚════════════════════════════════════╝"
          echo ""
          echo "📊 Report Information"
          echo "━━━━━━━━━━━━━━━━━━━━━"
          echo "Event Type: ${{ github.event_name }}"
          echo "Report Type: ${{ steps.report.outputs.report_type }}"
          echo "Is Weekday: ${{ steps.weekday.outputs.is_weekday }}"
          echo ""
          echo "📅 Time Information"
          echo "━━━━━━━━━━━━━━━━━━━"
          echo "UTC Time: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "KST Time: $(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S')"
          echo "Day: $(date +%A), $(date +%B) $(date +%d), $(date +%Y)"
          echo ""
          echo "✅ Status: ${{ job.status }}"
          echo ""
          echo "📋 Priority Rules Applied:"
          echo "  1. Monthly (1st) > Weekly (Monday) > Daily"
          echo "  2. Weekdays only (Mon-Fri)"
          echo "  3. Single report per day"
          echo ""