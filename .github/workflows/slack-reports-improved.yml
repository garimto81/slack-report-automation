name: Automated Slack Reports (Improved)

on:
  schedule:
    # 일간 보고서 - 매일 오전 9시 (한국 시간)
    - cron: '0 0 * * *'  # UTC 0:00 = KST 9:00
    # 주간 보고서 - 매주 월요일 오전 9시 30분 (한국 시간)  
    - cron: '30 0 * * 1'  # UTC 0:30 Monday = KST 9:30 Monday
    # 월간 보고서 - 매월 1일 오전 10시 (한국 시간)
    - cron: '0 1 1 * *'  # UTC 1:00 1st = KST 10:00 1st
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Report type to generate'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - daily
          - weekly
          - monthly
  push:
    branches:
      - main
      - clean-deployment-branch

env:
  TZ: Asia/Seoul
  NODE_VERSION: '18'

jobs:
  generate-report:
    name: Generate Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm install
          echo "✅ Dependencies installed successfully"

      - name: Determine report types to generate
        id: report
        run: |
          echo "🔍 Determining report types..."
          REPORTS_TO_GENERATE=""
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.report_type }}" = "all" ]; then
              REPORTS_TO_GENERATE="daily,weekly,monthly"
            else
              REPORTS_TO_GENERATE="${{ github.event.inputs.report_type }}"
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            # 스케줄 시간으로 구분
            CRON_SCHEDULE="${{ github.event.schedule }}"
            
            # 각 스케줄에 따라 다른 보고서 생성
            if [ "$CRON_SCHEDULE" = "0 0 * * *" ]; then
              # 매일 오전 9시 - 일간 보고서
              REPORTS_TO_GENERATE="daily"
            elif [ "$CRON_SCHEDULE" = "30 0 * * 1" ]; then
              # 월요일 오전 9시 30분 - 주간 보고서
              REPORTS_TO_GENERATE="weekly"
            elif [ "$CRON_SCHEDULE" = "0 1 1 * *" ]; then
              # 매월 1일 오전 10시 - 월간 보고서
              REPORTS_TO_GENERATE="monthly"
            else
              # 기본값: 날짜 기반 판단
              REPORTS_TO_GENERATE="daily"
              
              # 월요일이면 주간 보고서 추가
              if [ "$(date +%u)" = "1" ]; then
                REPORTS_TO_GENERATE="${REPORTS_TO_GENERATE},weekly"
              fi
              
              # 1일이면 월간 보고서 추가
              if [ "$(date +%d)" = "01" ]; then
                REPORTS_TO_GENERATE="${REPORTS_TO_GENERATE},monthly"
              fi
            fi
          else
            # Push 이벤트일 경우 테스트 모드
            REPORTS_TO_GENERATE="test"
          fi
          
          echo "reports=${REPORTS_TO_GENERATE}" >> $GITHUB_OUTPUT
          echo "📊 Reports to generate: ${REPORTS_TO_GENERATE}"
          echo "🕐 Current time (KST): $(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S')"
          echo "📅 Day of week: $(date +%A) ($(date +%u))"
          echo "📅 Day of month: $(date +%d)"

      - name: Test mode - Verify scripts
        if: contains(steps.report.outputs.reports, 'test')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🧪 Running in test mode..."
          
          # 파일 존재 확인
          echo "Checking required files..."
          [ -f "generate-full-report.js" ] && echo "✅ generate-full-report.js exists" || echo "❌ generate-full-report.js not found"
          [ -f "test-grouping-logic.js" ] && echo "✅ test-grouping-logic.js exists" || echo "❌ test-grouping-logic.js not found"
          
          # 그룹화 로직 테스트만 실행 (실제 메시지 전송 없음)
          if [ -f "test-grouping-logic.js" ]; then
            echo "Running grouping logic test..."
            node test-grouping-logic.js daily || echo "Test completed with status $?"
          fi
          
          echo "✅ Test mode completed"

      - name: Generate Daily Report
        if: contains(steps.report.outputs.reports, 'daily')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "📅 Generating daily report at $(TZ=Asia/Seoul date '+%H:%M KST')..."
          node generate-full-report.js daily
          echo "✅ Daily report sent successfully"

      - name: Generate Weekly Report
        if: contains(steps.report.outputs.reports, 'weekly')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "📅 Generating weekly report at $(TZ=Asia/Seoul date '+%H:%M KST')..."
          node generate-full-report.js weekly
          echo "✅ Weekly report sent successfully"

      - name: Generate Monthly Report
        if: contains(steps.report.outputs.reports, 'monthly')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_DM_USER_IDS: ${{ secrets.SLACK_DM_USER_IDS }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "📅 Generating monthly report at $(TZ=Asia/Seoul date '+%H:%M KST')..."
          node generate-full-report.js monthly
          echo "✅ Monthly report sent successfully"

      - name: Summary
        if: always()
        run: |
          echo "🎯 Workflow Summary"
          echo "==================="
          echo "Event: ${{ github.event_name }}"
          echo "Reports Generated: ${{ steps.report.outputs.reports }}"
          echo "Timestamp (KST): $(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S')"
          echo "Day Info: $(date +%A), $(date +%B) $(date +%d)"
          echo "Status: ${{ job.status }}"