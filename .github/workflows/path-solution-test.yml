name: Path Solution Test - 5 Different Approaches

on:
  workflow_dispatch:
    inputs:
      solution_type:
        description: 'Which solution to test'
        required: true
        default: 'working-directory'
        type: choice
        options:
          - working-directory    # Solution 1: explicit working-directory
          - absolute-path       # Solution 2: use absolute paths
          - path-verification   # Solution 3: verify then install
          - checkout-path       # Solution 4: specify checkout path
          - combined-approach   # Solution 5: combine all solutions

jobs:
  test-solution:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        shell: bash
        
    steps:
      - name: "Setup - Checkout Repository"
        uses: actions/checkout@v4
        with:
          path: ${{ inputs.solution_type == 'checkout-path' && 'repo' || '' }}
        
      - name: "Setup - Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # No cache options to avoid path issues
          
      - name: "Solution 1 - Working Directory Approach"
        if: inputs.solution_type == 'working-directory'
        working-directory: ./
        run: |
          echo "🔧 SOLUTION 1: Using working-directory"
          echo "======================================"
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          echo "📦 Installing with explicit working-directory..."
          npm cache clean --force
          npm install --no-audit --no-fund
          echo "✅ Installation completed!"
          
          echo "🔍 Verifying installation:"
          [ -d "node_modules" ] && echo "✅ node_modules created" || echo "❌ node_modules missing"
          
      - name: "Solution 2 - Absolute Path Approach"
        if: inputs.solution_type == 'absolute-path'
        run: |
          echo "🔧 SOLUTION 2: Using absolute paths"
          echo "=================================="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          
          # Navigate to workspace explicitly
          cd "$GITHUB_WORKSPACE"
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          echo "📦 Installing from absolute path..."
          npm cache clean --force
          npm install --no-audit --no-fund
          echo "✅ Installation completed!"
          
          echo "🔍 Verifying installation:"
          [ -d "$GITHUB_WORKSPACE/node_modules" ] && echo "✅ node_modules created in workspace" || echo "❌ node_modules missing"
          
      - name: "Solution 3 - Path Verification Approach"
        if: inputs.solution_type == 'path-verification'
        run: |
          echo "🔧 SOLUTION 3: Path verification then install"
          echo "============================================="
          
          # Find the correct package.json location
          PACKAGE_DIR=""
          if [ -f "./package.json" ]; then
            PACKAGE_DIR="."
          elif [ -f "$GITHUB_WORKSPACE/package.json" ]; then
            PACKAGE_DIR="$GITHUB_WORKSPACE"
          else
            PACKAGE_DIR=$(find /home/runner/work -name "package.json" -type f -exec dirname {} \; 2>/dev/null | head -1)
          fi
          
          echo "📂 Package directory found: ${PACKAGE_DIR:-'NOT FOUND'}"
          
          if [ -n "$PACKAGE_DIR" ]; then
            echo "📦 Installing from verified path: $PACKAGE_DIR"
            cd "$PACKAGE_DIR"
            echo "Current directory: $(pwd)"
            ls -la
            
            npm cache clean --force
            npm install --no-audit --no-fund
            echo "✅ Installation completed!"
            
            echo "🔍 Verifying installation:"
            [ -d "node_modules" ] && echo "✅ node_modules created" || echo "❌ node_modules missing"
          else
            echo "❌ Could not find package.json"
            exit 1
          fi
          
      - name: "Solution 4 - Checkout Path Approach"
        if: inputs.solution_type == 'checkout-path'
        run: |
          echo "🔧 SOLUTION 4: Custom checkout path"
          echo "=================================="
          
          # Files should be in ./repo/ directory
          echo "Checking repo directory:"
          ls -la repo/
          
          echo "📦 Installing from repo directory..."
          cd repo/
          echo "Current directory: $(pwd)"
          
          npm cache clean --force
          npm install --no-audit --no-fund
          echo "✅ Installation completed!"
          
          echo "🔍 Verifying installation:"
          [ -d "node_modules" ] && echo "✅ node_modules created" || echo "❌ node_modules missing"
          
      - name: "Solution 5 - Combined Approach"
        if: inputs.solution_type == 'combined-approach'
        defaults:
          run:
            shell: bash
            working-directory: ./
        run: |
          echo "🔧 SOLUTION 5: Combined approach (all techniques)"
          echo "==============================================="
          
          # Step 1: Verify environment
          echo "Step 1 - Environment verification:"
          echo "PWD: $(pwd)"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "Files in PWD:"
          ls -la
          
          # Step 2: Find package files
          echo -e "\nStep 2 - Package file location:"
          PACKAGE_JSON=""
          PACKAGE_LOCK=""
          
          for path in "." "$GITHUB_WORKSPACE"; do
            if [ -f "$path/package.json" ]; then
              PACKAGE_JSON="$path/package.json"
              PACKAGE_LOCK="$path/package-lock.json"
              break
            fi
          done
          
          echo "package.json: ${PACKAGE_JSON:-'NOT FOUND'}"
          echo "package-lock.json: ${PACKAGE_LOCK:-'NOT FOUND'}"
          
          # Step 3: Ensure we're in the right directory
          if [ -n "$PACKAGE_JSON" ]; then
            PACKAGE_DIR=$(dirname "$PACKAGE_JSON")
            echo -e "\nStep 3 - Navigate to package directory: $PACKAGE_DIR"
            cd "$PACKAGE_DIR"
            echo "Current directory: $(pwd)"
            
            # Step 4: Clean and install
            echo -e "\nStep 4 - Clean installation:"
            npm cache clean --force 2>/dev/null || echo "Cache clean skipped"
            
            # Step 5: Install with all safety flags
            echo -e "\nStep 5 - Safe installation:"
            npm install --no-audit --no-fund --prefer-offline --no-optional
            
            # Step 6: Verify
            echo -e "\nStep 6 - Verification:"
            [ -d "node_modules" ] && echo "✅ node_modules created successfully" || echo "❌ node_modules creation failed"
            [ -f "node_modules/.package-lock.json" ] && echo "✅ Package lock applied" || echo "⚠️ No package lock detected"
            
            echo -e "\n✅ Combined approach completed successfully!"
          else
            echo -e "\n❌ Could not locate package.json file"
            echo "Available files in workspace:"
            find "$GITHUB_WORKSPACE" -name "*.json" -type f 2>/dev/null || echo "No JSON files found"
            exit 1
          fi
          
      - name: "Test Results Summary"
        if: always()
        run: |
          echo ""
          echo "🎯 TEST RESULTS SUMMARY"
          echo "======================="
          echo "Solution tested: ${{ inputs.solution_type }}"
          echo "Job status: ${{ job.status }}"
          echo "Timestamp: $(date)"
          echo ""
          
          # Check if node_modules was created
          NODE_MODULES_FOUND=false
          for location in "." "$GITHUB_WORKSPACE" "repo"; do
            if [ -d "$location/node_modules" ]; then
              echo "✅ node_modules found in: $location"
              echo "   - Total packages: $(ls "$location/node_modules" 2>/dev/null | wc -l)"
              NODE_MODULES_FOUND=true
              break
            fi
          done
          
          if [ "$NODE_MODULES_FOUND" = false ]; then
            echo "❌ node_modules not found in any expected location"
          fi
          
          echo ""
          echo "🚀 Next steps:"
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ This solution works! Apply it to your main workflow."
            echo "💡 Use the settings from '${{ inputs.solution_type }}' solution."
          else
            echo "❌ This solution failed. Try a different approach."
            echo "💡 Consider running debug-path-issue.yml for more analysis."
          fi